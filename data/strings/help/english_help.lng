# TODO: Shortcut Keys (aus dem Intro) auffuehren!
@HELP_STRINGS
	@ENGLISH
# INDEX_CHAPTER = 0
		@0	
			`$Evolution Forge Help Index$`###
			~BULLET_BITMAP~@Chapter  1: Introduction@100@##
			~BULLET_BITMAP~@Chapter  2: Detailed description@200@##
			~BULLET_BITMAP~@Chapter  3: Troubleshoot@300@##
			~BULLET_BITMAP~@Chapter  4: Configuration@400@##
			~BULLET_BITMAP~@Chapter  5: Program Mechanics@500@##
			~BULLET_BITMAP~@Chapter  6: Interactive Mode@600@##
			~BULLET_BITMAP~@Chapter  7: Evolutionary Algorithms: The core of the program@700@##
			~BULLET_BITMAP~@Chapter  8: Communication@800@##
			~BULLET_BITMAP~@Chapter  9: Development of EF@900@##
			~BULLET_BITMAP~@Chapter 10: Philosophy and EF@1000@#
		@END
		
# INTRODUCTION_MAIN_CHAPTER = 100
		@100
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 1: Introduction@0@###
			~BULLET_BITMAP~@1.1: What does this program?@110@##
			~BULLET_BITMAP~@1.2: Quickstart@120@##
			~BULLET_BITMAP~@1.3: Overview of the elements@130@##
			~BULLET_BITMAP~@1.4: Is it useful?@140@##
			~BULLET_BITMAP~@1.5: Limits of the Program@150@##
			~BULLET_BITMAP~@1.6: Problems of the Program@160@##
		@END

# INTRODUCTION_CHAPTER = 110

		@110
			@1.1: What does this program?@100@##
			The program calculates the fastest build orders for certain goals (e.g. '4 wraiths'). You can either click in the build order manually and let the program improve it or you can just @click in the goals@220@ you want and the program will calculate an optimal build order. To start/stop the calculation you can either press SPACE or click on the @calculation button@210@.#
			The program simulates an abstract $StarCraft:Broodwar$ environment and calculates the time a certain build order needs.# By comparing different build orders, randomly changing them and taking the best build orders into the next calculation the build order is improved step by step.# The program uses @evolutionary algorithms@700@ which fit perfectly for this kind of task.#
		@END

#	INTRODUCTION_QUICKSTART_CHAPTER = 120
		@120
			@1.2: Quickstart@100@##
			It's easy:#
			- In the @score window@210@ choose a race by clicking on the $'race'$ button#
			- In the @unit list window@230@ click on ~ADD_BITMAP~, choose a category and pick your goals#
			- Finally click on $'(paused)'$ button in the @score window@210@ and sit back to watch the calculation#
			- You will see items moving around in a window named @build order@260@. The program will optimize the build order by adding, removing and rearranging the items.#
			- In the @score window@210@ you will see the current status of the calculation. $'searching'$ means that it still looks for a valid solution (i.e. a solution that fulfills your goals), $'optimizing'$ means that it will try to reduce the time the build order needs#
			- The @overview@240@ window shows how supply, minerals and gas develop over the time span of the build order#
			- The @graphical build order@250@ window shows graphically where and when units and buildings are constructed#
			- After a while you will notice that there are no more changes on the screen. Probably the fastest build order is found.#
			- Now you might want to save the build order by clicking on ~SAVE_BITMAP~ in the @build order window@260@. You can also save your goal list by doing the same with the @unit list window@230@#
			- Saved build orders and goal lists can be loaded again by clicking on ~LOAD_BITMAP~#
			- When you have saved several build orders you might want to check the database.# TODO
		@END

# INTRODUCTION_OVERVIEW_CHAPTER = 130
		@130
			@1.3: Overview of the elements@100@##
			TEXT  ~SUB_BITMAP~   
		@END

# INTRODUCTION_USE_CHAPTER = 140
		@140
			@1.4: Is it useful?@100@##
			Naah, it's just fun (I heard). ~UGLY_KING_BITMAP~##	
			Well, you *could* try some build orders in the game. But that will just result in even more fun...#
			Personally I doubt that people who already have a lot of skill in playing StarCraft will profit (i.e. more winning!) from this program. A lot of good build orders already were 'discovered' in the many years since the release of StarCraft. But maybe you will take it as an inspiration for trying out something new :)#
			For the unexperienced players I think it is of some help. When watching how Evolution Forge optimizes the build orders you certainly will learn what makes a build order *fast* and what makes it *slow*.#
			If you are into computer science you might find the program itself more interesting. I have put several small articles about the program in the help section. If you are further interested about how this all 'computes' please feel free to ask me in the forums.#
			For myself 'Evolution Forge' was/is a very TODO lehrreich. I see EF as a steppingstone for future programs. I certainly will apply the same program engine on other games, like WarCraft, Dawn of War or, maybe, StarCraft2.#
		@END

# INTRODUCTION_LIMITS_CHAPTER = 150
		@150
			@1.5: Where are the limits?@100@##
			- 'Fast' does not necessarily equal 'good'. If you want 'good' build orders then watch replays :)
			- It only calculates only a general build order. Depending on the map, the latency, your mouse speed and many other small factors there might be a better build order.#
			- Goals consisting of many units will result in exponential growth of time needed for the calculation.#
			- In most cases the build orders cannot be applied directly 1:1 in the game. You have to exercise them and adapt them to your needs.
			- Enemy movements, expansions or even combat is not (yet) part of the program
		@END

# INTRODUCTION_PROBLEMS_CHAPTER = 160
		@160
			@1.6: Is it cheating?@100@##
			Well... in a way... yes.#
			If you use the program correctly you might get an advantage over your enemy: You learn to get a better starting in the game so that you can concentrate on the main thing, strategies and tactics.#
			While you can get the same information by watching replays, reading strategy articles or just playing the game it is much more fun to interactivly trying out combinations to compare them directly on the screen.#
		@END


# DESCRIPTION_MAIN_CHAPTER = 200
		@200
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 2. Detailed Description@0@###
			~BULLET_BITMAP~@2.1: The score window@210@##
			~BULLET_BITMAP~@2.2: The unit list window@220@##
			~BULLET_BITMAP~@2.3: The build order diagram window@230@##
			~BULLET_BITMAP~@2.4: The build order graph window@240@##
			~BULLET_BITMAP~@2.5: The build order window@250@#
		@END

# DESCRIPTION_SCORE_WINDOW_CHAPTER = 210
		@210
			@2.1: The score window@200@##
			~SCORE_EMPTY_BITMAP~   
			(1) $Choose a map$#   
			A map contains a unit list for each player (normally workers and a main building), start conditions (minerals, gas, ...) and a list of locations and their distances.#
			(2) $Add a player$#   
			Add a player to the list. All players in the list will play on the map you have chosen.##
			~BULLET_BITMAP~   
			(3) $Choose a race$#   
			Choose which race you want to use for calculation. Choosing a new race will reset the calculation.#   
			(4) $Remove the player$#   
			Removes the player from the calculation, any unsaved data is lost.#   
			(5) $Continue/Pause calculation$#   
			Here you can start and stop the calculation. The button itself will change the text during the calculation from $searching$ (that means a valid solution was not found yet) to $optimizing$ (that means that the program has found a valid solution and tries to optimize the speed by rearranging the items).#   
			(6) $Time$#   
			Here is the time the current solution needs. Please remember that the time is the same as a game with $speed 5$. For example a worker needs 20 seconds to build.#   
			(7) $Percent of goals fulfilled / Percent of optimal solution$#   
			If the calculation is still in $searching$ mode you will see here how much percent of the goals are fulfilled. In $optimizing$ mode the percentage gives a comparison of the time with the theoretical best time. Note that it is hardly possible to reach 100% as the theoretical best time is measured using infinite ressources and workers.#
			TODO
		@END
	
# DESCRIPTION_UNIT_LIST_WINDOW_CHAPTER = 220
		@220
			@2.2: The unit list window@200@##
			~FORCE_WINDOW_BITMAP~
			(1) $Add a goal$#
			Here you can add units/buildings/researches to your goal list below. These goals will be used to calculate the build order. If you like a different structure (based on buildings vs based on unit types) of the unit menu then change the 'facility mode' in the settings window.#
			(2) $Load a goal list$#
			With this menu you can clear the goal list or load goal lists you have saved earlier. The current results of the calculation will be discarded.#
			(3) $Save the goal list$#
			Save the current goal list to your harddisk. If you are interested you can find the files in '$settings/goals/$' in your Evolution Forge directory.#
			(4) $Goal list$#
			This is the goal list. At the top you can see the name (you can change that by loading/saving the goal list), below you can see all units that will be used for the calculation. You can remove an unit by clicking right and add an unit by clicking left. If that does not work some entries will highlight. That means that the unit you have clicked on are needed by other units (e.g. factory for starport).#
			(5) $Unit count$#
			Here you can see three numbers. The last one is the number of desired units (1 in this case), the second number is the total number of units after the build order was executed and the first number shows the difference between total and desired number.#
			(6) $Not fulfillfed goal$#
			When the program is in '$searching mode$' some goals are displayed in red. That means that the program did not found a valid solution that fulfills all goals yet.#
			(7) $Time$#
			If you move your mouse to the right side of one goal entry and click on the '$time$' button this setting field opens. You can set here a time when this goal shall be fulfilled at the latest. The difference of the '$unit count$' compared to an entry without a time restriction is that the total number is the number of units at that time and not at the end. If you want to have both time restricted goals and normal goals just add the same unit using the unit menu.#
			(8) $non-goals$#
			In this list are all auxiliary units that are not necessary for fulfilling the goals (gathering gas, providing supply, morphing units, addons etc.). If you left-click on one of the non-goal entries it will move up to the goal list.#
		@END
	
# DESCRIPTION_BODIAGRAM_WINDOW_CHAPTER = 230
		@230
			@2.3: The build order diagram window@200@##
			~BODIAGRAM_WINDOW_BITMAP~
			(1) $Minerals and Gas$#
			The blue and green graph represents the amount of minerals and gas that you have at that time. While the program tries to maximize the amount of gathered ressources a fast build order should never save large amounts of minerals and gas.#
			(2) $Supply$#
			Several bars represent the supply that is availible at that time. The bigger the bar the more supply is availible. A good build order should try not to waste supply and always build additional supply just before it is needed.#
			(3) $Data$#
			If you move your mouse inside the window you can see a bar and all the values of minerals, gas and supply at that time.
		@END

# DESCRIPTION_BOGRAPH_WINDOW_CHAPTER = 240
		@240
			@2.4: The build order graph window@200@##
			~BOGRAPH_WINDOW_BITMAP~
			In this window all orders are presented graphically. On the top you see a rough time raster, below there is a list of used facilities. When building for example a factory the SCV 'facility' is used, when building a marine the barracks facility is used. When there are several build orders and several availible facilities the build orders are often executed in parallel because that speeds up the build order.#			
		@END

# DESCRIPTION_BUILD_ORDER_WINDOW_CHAPTER = 250
		@250
			@2.5: The build order window@200@##
			~BO_WINDOW_BITMAP~

			TODO
			You can edit the build order, too. To do that you have to click on the $edit mode button$ TODO which pauses the calculation (else the program will immediately 'optimize' your build order), change the entries and finally press edit button again TODO. For the editing part look in the @Editing the build order@610@ chapter.
			TEXT
		@END

# DESCRIPTION_MAP_WINDOW_CHAPTER = 260
		@260
			@2.6: The map window@200@##
			TEXT
		@END
		@270
			@2.7: The database window@200@##
			TEXT
		@END
	

# RESULTS_MAIN_CHAPTER = 300
		@300
			>~LEMMINGS_BITMAP~
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 3. Troubleshoot@0@###
			~BULLET_BITMAP~@3.1: About game speed, times and numbers@310@##
			~BULLET_BITMAP~@3.2: HTML output@320@##
			~BULLET_BITMAP~@3.3: Using the database@330@##
			~BULLET_BITMAP~@3.4: Results during the run@340@#
		@END

# RESULTS_TIME_AND_NUMBERS_CHAPTER = 310
		@310
			@3.1: About game speed, times and numbers@300@##
			StarCraft counts the time in $frames$. For example a SCV needs 300 game frames to be completed. In the starcraft editor (and on various sites and tables) you will find all times in seconds. These times are a little misleading as each time corresponds to a game with speed 4 ($normal$ speed) where 15 frames per second are displayed in the game StarCraft. Thus with speed 4 a SCV would need 20 seconds to complete.#
			In Evolution Forge you can set to what time format all times should be transformed. Internally all times are calculated by frames, so when you save your build order while being in $normal$ speed mode and reload it in $fastest$ speed mode you will notice that the time the build order needs is a little smaller. Here the whole transformation list :#
			- $slowest$: $6$ frames / second#
			- $slower$: $9$ frames / second#
			- $slow$: $12$ frames / second#
			- $normal$: $15$ frames / second#
			- $fast$: $18$ frames / second#
			- $faster$: $21$ frames / second#
			- $fastest$: $24$ frames / second##
			Thus a build order that needs 10 minutes in $slowest$ mode will need $2:30$ minutes in '$astest$ mode
		@END

# RESULTS_OUTPUT_CHAPTER = 320
		@320
			@3.2: HTML output@300@##
			When saving a build order the TODO
			TEXT
		@END

# RESULTS_DATABASE_CHAPTER = 330
		@330
			@3.3: Using the database@300@##
			Saving the build order also results in a new entry in the database. You can access the database by clicking on the $database$ button at the top or, if you are in single-game mode, by clicking on the $compare with database$ button. TODO
			TEXT
		@END

# RESULTS_INGAME_CHAPTER = 340
		@340
			@3.4: Results during the run@300@##
			TEXT
		@END


# CONFIGURATION_MAIN_CHAPTER = 400
		@400
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 4. Configuration of the program@0@###
			~BULLET_BITMAP~@4.1: Loading/Saving Settings@410@##
			~BULLET_BITMAP~@4.2: Resolution, Color Depth and Language@420@##
			~BULLET_BITMAP~@4.3: Core Settings@430@##
			~BULLET_BITMAP~@4.4: GUI Settings@440@##
			~BULLET_BITMAP~@4.5: Rules Settings@450@##
		@END


# CONFIGURATION_LOADING_SAVING_CHAPTER = 410
		@410
			@4.1: Loading/Saving Settings@400@##
			All settings (also goals, maps etc.) are saved in the $settings$ folder in your EF directory. You can save the current settings by clicking on the $save$ button. Then the three files $main.cfg$, $ui.cfg$ and $core.cfg$ are overwritten with the new values. You can edit those files manually but please keep in mind that the syntax has to remain the same. If the program do not work anymore because you have changed the settings copy the original files from the archive or start Evolution Forge in the command line with the parameter 'defaults': $ef.exe -defaults$.#
		@END

# CONFIGURATION_RESOLUTION_DEPTH_LANGUAGE_CHAPTER = 420
		@420
			@4.2: Resolution, Color Depth and Language@400@##
			The engine which is used in Evolution Forge allows different resolutions, color depths and languages:
			$Resolution$:#   The sizes and coordinates of the windows and items are to a certain extend statically programmed into the engine thus changing the resolution will not neccessarily result in just a simple zoom. Please keep in mind that changing the resolution in full screen mode takes a little more time and also keep in mind that your graphics card/operating system may not support all resolutions/color depths.
			$Color depth$:#   I commend not to use 8bit as this looks ugly. Evolution Forge uses more than 256 colors (especially when using a background picture) and therefor 16bit or 32bit is recommended. 24bit is still somewhat slow.#
			$Languages$:#   If you find any errors in the text or do not understand a certain phrase or description then please tell me so. If you want to invest the time to translate the text into a different language I would be happy if you contact me. Evolution Forge is based on 'UTF' which means any font can be displayed correctly. The main text files are in $settings/strings$ and $settings/help$.			
		@END

# CONFIGURATION_CORE_SETTINGS_CHAPTER = 430
		@430
			@4.3: Core Settings@400@##
			$Fast calculation$:#
			$Max Time$: Sets the upper limit of time span where a valid build order should be searched. Reducing this might result in a faster calculation but keep in mind that if you set it too low the program might find no solution at all. Even the best optimized build order cannot give you a Battle Cruiser in 1 minute.#
			$Max Length$: Sets the maximum length of a build order. Reducing this also might result in a faster calculation. And again, if you set this to very small number the program might not find a solution at all. There is no way building 10 marines with a build order that has 9 elements.#
			$Max Timeout$: In each step of the build order the program waits until all requirements are met. The upper time limit of that waiting is set here. If you set the number lower than the longest build time (in Starcraft: 266 seconds) you might loose some valid solutions. (for better understanding read @How the build order is processed@510@)#
#			      "SETTING_FAST_CALCULATION_TOOLTIP_STRING" = "Mehrere interne Parameter werden auf Werte gesetzt wodurch die Optimierung beschleunigt wird (jedoch fallen dabei u.U. einige Baureihenfolgen weg)"
#			   "SETTING_DEEP_SEARCH_TOOLTIP_STRING" = "Soll die Suche grundsätzlich von der aktuell besten Baureihenfolge ausgehen? Die Alternative wäre die Breitensuche bei der auch wenn eine bessere gefunden wurde noch kurzzeitig auf Basis der bisherigen Baureihenfolgen gesucht wird."
#		           "SETTING_WAIT_ORDERS_TOOLTIP_STRING" = "In Ausnahmefällen ist es sinnvoll Rohstoffe zu sparen. Hierdurch werden u.U. bessere Baureihenfolgen auf Kosten der Berechnungsdauer gefunden."
#		         "SETTING_EXPANSION_SET_TOOLTIP_STRING" = "Mit dieser Option werden alle Einheiten des Erweiterungssets benutzt (z.B. Schleicher oder Korsar)"
#		   "SETTING_ALWAYS_BUILD_WORKER_TOOLTIP_STRING" = "Soll versucht werden ununterbrochen Arbeiter zu produzieren?"
#		             "SETTING_AUTO_RUNS_TOOLTIP_STRING" = "Soll nach einer Zeit ohne Fortschritt bei der Optimierung der aktuelle Versuch automatisch gespeichert und neugestartet werden?"
#		       "SETTING_MAX_GENERATIONS_TOOLTIP_STRING" = "Nach wievielen unveränderten Generationen soll der aktuelle Versuch verworfen und mit einer neuerstellten Baureihenfolge begonnen werden?"
		
		@END

# CONFIGURATION_GUI_SETTINGS_CHAPTER = 440
		@440
			@4.4: GUI Settings@400@## 
			$Glowing Buttons$: Switches the animation of buttons between glowing and blinking.#
			$DNA Spirale$: Display a Spiral that looks like DNA. That is just some nice looking feature with no real use. I will put in some animations later. So far the only thing that it displays are the colors of the entries in the @build order window@260@.#
			$Background Bitmap$: With this option you can display a picture in the background. This makes animations a lot slower because the engine is not yet fully optimized. You can use your own pictures by either replacing the appropriate pictures in the $data/bitmaps$ folder or by changing the entries in $settings/default.cfg$. If you use the latter keep in mind that you have to be careful. Refer to the description at the top in this file.#
			$Fullscreen$: Switch between window mode and fullscreen mode.#
			$Tooltips$: Activates so called tooltips. Besides displaying help texts on buttons it also displays unit statistics and other information in a small box. Currently drains some CPU power because of some bad optimized routines in the engine.#
			$Unload Graphics$: If you are very low on memory then use this. It will unload graphics from the memory if they are not used.#
			$Smooth Movements$: Switch between smooth movement and jumping to the target position. Slows the redrawing a little.#
			$Show Debug$: Shows current $frames per second$ and how the CPU is used for each part of the program. No real use except for the user I think :)#
			$Desired Framerate$: This number tells the engine how often the screen should be redrawn each second. Keep it above 20 if you want to watch the process.#
			$Desired CPU Usage$: The maximum percentage of CPU the program will grab. If you let Evolution Forge run in the background while working on something else you might want to set it to 80% or lower.#
		@END

# CONFIGURATION_RULES_SETTINGS_CHAPTER = 450
		@450
			@4.5: Rules Settings@400@##
			TEXT
		@END


# MECHANICS_MAIN_CHAPTER = 500
		@500
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 5. Mechanics of the program@0@###
			~BULLET_BITMAP~@5.1: How the build order is processed@510@##
			~BULLET_BITMAP~@5.2: How multiplayer works@520@##
			~BULLET_BITMAP~@5.3: How the Game is simulated@540@##
			~BULLET_BITMAP~@5.4: How to finetune the build order@530@##
		@END


# MECHANICS_ORDER_CHAPTER = 510
		@510
			@5.1: How the build order is processed@500@##
			The build order is a linear array of orders which is executed one by one (later versions will execute some orders parallel). As long as an order cannot be build the next order has to wait. Internally the programm interpolates the current situation (minerals, gas, build times) to a later point in time where a new building is built or enough minerals and gas is gathered. Then it checks again whether the current order can be executed.
			TODO
		@END

# MECHANICS_MULTIPLAYER_CHAPTER = 520
		@520
			@5.2: How multiplayer works@500@##
			(UNDER CONSTRUCTION)
		@END
# MECHANICS_SIMULATION_CHAPTER = 530
		@530
			@5.3: How the Game is simulated@500@##
			In StarCraft (TM) each object (units, buildings, build queues) is processed one by one. The building time is decreased then the unit is moved then the resources are gathered etc. Simulating all this in detail costs much time thus the program jumps from one event (e.g. a new unit is built) to the next. All movements and resource gathering is compressed into a single calculation which increases the calculation speed greatly but decreases the accuracy. But because units often move around randomly this is impossible to accuratly calculate anyway.
		@END

# MECHANICS_FINETUNE_CHAPTER = 540
		@540
			@5.4: How to finetune the build order@500@##
			As described above you
		@END

# INTERACTIVE_MAIN_CHAPTER = 600
		@600
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 6. Interactive mode@0@###
			~BULLET_BITMAP~@6.1: Editing the build order@610@##
			~BULLET_BITMAP~@6.2: Playing against the computer@620@##
			~BULLET_BITMAP~@6.3: Letting it play against itself@630@##
			~BULLET_BITMAP~@6.4: What to learn from the program@640@#
		@END
	
# INTERACTIVE_EDITING_CHAPTER = 610
		@610
			@6.1: Editing the build order@600@##
			- Left click and hold to move an entry#
			- Right click to open a unit menu to insert new entries#
			- Shift + Left click to clone the entry#
			- Shift + Right click to remove the entry#
			TODO
		@END

# INTERACTIVE_PLAYING_CHAPTER = 620
		@620
			@6.2: Playing against the computer@600@##
			(UNDER CONSTRUCTION)
		@END

# INTERACTIVE_TOURNAMENTS_CHAPTER = 630
		@630
			@6.3: Letting it play against itself@600@##
			(UNDER CONSTRUCTION)
		@END

# INTERACTIVE_WHATTOLEARN_CHAPTER = 640
		@640
			@6.4: What to learn from the program@600@##
			(UNDER CONSTRUCTION) Letting the program run against itself is indeed an interesting experience. There is no "best build order", each build order has its disadvantages, it is always a process of adaption. That is what kept discussions about StarCraft interesting, each new strategy can be countered by some different strategy.#
			In addition you can see how economic advantages are traded in for speed: Always building workers might give you an economical advantage over your opponent and therefore more units... but only in a long-term scale. The distance to your enemy plays an important role. If you start right beside your enemy your first priority might be a combat unit. The farther the enemy is away the more important long-term thinking gets.
			If you want to know more about the algorithm which makes all that possible then proceed to ~SMALL_ARROW_LEFT_BITMAP~@Chapter 7@700@.
		@END
# CORE_MAIN_CHAPTER = 700
		@700
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 7. Evolutionary Algorithms: The core of the program@0@###
			~BULLET_BITMAP~@7.1: The algorithm of the core@710@##
			~BULLET_BITMAP~@7.2: Build order TODO@720@##
			~BULLET_BITMAP~@7.3: Scalability@730@##
			~BULLET_BITMAP~@7.4: Comparison?@740@##
			~BULLET_BITMAP~@7.5: Problems with the algorithm@750@#
		@END


# CORE_ALGORITHM_CHAPTER = 710
		@710
			@7.1: The algorithm of the core@700@##
			If you understand a little of computer science this should be no problem:##
			- create 100 random build orders#
			- loop#
			-   determine $fitness$ of each build order#
			-   $pick the best and worst$ build orders#
			-   overwrite the worst with best build orders#
			-   $randomly mutate$ the build orders#
			- loop end##
			In this case $fitness$ is how fast the build order can fulfill the given goals in a StarCraft-like environment.#
			If there are two build orders which need the same time then the amount of gathered minerals and gas is compared.#
			There are several possible approaches how to $pick the best and worst$ build orders, for example the program could take the best 10% and overwrite the worst 10%.#
			When $randomly mutating$ the program randomly swaps, adds, removes or moves whole blocks of orders within a build order.##
			
			The main prerequsite of this algorithm is that small changes in the build order result in small changes in the final time. If that is the case the algorithm builds the final solution step by step until it reaches a (near) optimal point.#
			The most important tasks (for the programmer) is to improve the part where the build order is mutated and where its fitness is determined. A purely random mutation will probably result in an invalid solution while checking for a valid solution will decrease the program speed. The fitness determination on the other hand needs a very exact simulation of the 'real' game and needs to track all statistics for the output on the screen.#
		@END

# CORE_BUILDORDER_CHAPTER = 720
		@720		
			@7.2: Build order TODO@700@##
			Build orders itself are represented internally as a string of numbers. To improve the speed only such units can be build that are needed for the current build order. In addition the time when each build order will be executed is determined dynamically: Each order is executed as soon as all prerequsites (minerals, gas, supply, facilities etc.) are met, 'wait orders' can be used to delay the execution. Also instead of calculating each second of the game the program jumps from one point in time to the next, whenever a new event is predicted (i.e. when it is expected that another prerequisite of the current order is fulfilled).#
			After a code item is translated into a real unit it is put into a building queue sorted by the time the unit will be finished. In each step the top of the building queue is processed and the item, if the is is completed, is added to the global map where it can interact with other units and other players (well, not yet).#
			The code itself is represented as a linked list which allows fast mutation while slowing down the access on each element a little.#
			At a later date I will program some sort of internal databases where I will put all build orders that were calculated so far. This should save a lot of time because at many times equally build orders are calculated and cpu time is wasted.#
		@END

# CORE_SCALABILITY_CHAPTER = 730
		@730
			@7.3: Scalability@700@##
			Using evolutionary algorithms is very nice when it comes to scalability :) Internally there is not just one but hundreds of build orders calculated in parallel. Theoretically (if the program itself supports it) I could let Evolution Forge run on 128 different computers and get a speedup of 5000%-10000%. While speed of generating the statistics for and the graphics output itself cannot be improved as the elements are heavily interconnected each build order can be executed and mutated in parallel because each build order is independent to the others.#
			To really value this trait of EAs you have to understand that many algorithms do not support running it on several machines (or CPUs) in parallel and therefore do not gain any advantage.#
			When Evolution Forge gets (even) more computationally demanding I will think about putting in some parallel code (threads, networking etc.)...
		@END

# CORE_COMPARISON_CHAPTER = 740
		@740
			@7.4: Comparison?@700@##
			TEXT
		@END

# CORE_PROBLEMS_GAS_CHAPTER = 750
		@750
			@7.5: Problems with the algorithm@700@##
			In the algorithm itself you might have noticed the word $random$ at several points in the documentation. Well, after all this is a random algorithm. It might not give you the optimal solution. But that is not quite neccessary as there are some inaccuracies between the 'real game' and the simulation anyways. If you are $extremely$ unlucky you might never get a result when using this program ;)#
			The dependance on the random generator can be reduced when using so-called $crossing over$ which mixes the code of build orders together to create a new build order. Unfortunately this is suited better for other problems because Evolution Forge uses linear code while $crossing over$ works best on tree-like structures. It is still a big mystery how crossing over effectivly works in real biological cells without creating lots of bad copies but after all the genetic code is just the 'genotype' (the code) and not the phaenotype (the animal/plant) and there are several additional organization layers and networks between the code and the final manifestation...#
			A big problem I am still facing is that when using location orders (e.g. move 5 marines to enemy's entrance) the complexity of the calculation increases (and therefore the calculation speed drops) significantly.#
			The biggest disadvantage of such an algorithm is of course that it is not a real-time code. It hardly can *react* on events (like enemy movements) and when it comes to real strategic decisions it totally fails. At that point one has to use the algorithm no longer on lists but on neural networks instead.#
		@END


# COMMUNICATION_MAIN_CHAPTER = 800
		@800
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 8. Communication@0@###
			~BULLET_BITMAP~@8.1: ClawSoftware.de@810@##
			~BULLET_BITMAP~@8.3: About myself@830@#
		@END

# COMMUNICATION_CLAWSOFTWARE_CHAPTER = 810
		@810
			@8.1: ClawSoftware.de@800@##
			~CLAWSOFTWARE_BITMAP~gsldkjfg lsdkjgf lskdfjg lksdjfg k #
		@END

# COMMUNICATION_ABOUT_CHAPTER = 830
		@830
			@8.3: About myself@800@##
			~CLEMENS_BITMAP~ My name is Clemens, I am living in germany and currently studying Computer Science in Karlsruhe. I am programming since about 12 years doing small projects until 2000. Then I started my work on Evolution Forge (called Starcraft Calculator back then).#
		@END

# DEVELOPMENT_MAIN_CHAPTER = 900
		@900
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 9. Development@0@###
			~BULLET_BITMAP~@9.1: History@910@##
			~BULLET_BITMAP~@9.2: Things that will come later@920@##
			~BULLET_BITMAP~@9.3: Current developments@930@##
			~BULLET_BITMAP~@9.4: Future plans with Evolution Forge@940@#
			~BULLET_BITMAP~@9.5: Things will never be implemented@950@##
			MAKING OF...~~~
		@END

# DEVELOPMENT_HISTORY_CHAPTER = 910
		@910
			@9.1: History@900@##
			It all began about 4 years ago when I wrote a small program for VOR 
			TEXT
		@END


# DEVELOPMENT_TODO_CHAPTER = 920
		@920
			@9.2: Things that will come later@900@##
			I will certainly go into the parallel computing a little more.
			TEXT
		@END

# DEVELOPMENT_CURRENT_CHAPTER = 930
		@930
			@9.3: Current developments and future plans@900@##
			Well, I mentioned this several times and always post-poned it as I wanted to have a functioning GUI first... 'Locations' will be the next great thing, i.e. expansions and such. It still gives me restless nights (well, somewhat) to figure out how to implement them in a nice user interface... It's less a problem of actually calculating the movements of different units on a virtual map than to displaying it and allowing you to edit/add/delete things there. In the core itself 'locations' are already implemented to a large portion but it still will need some time to complete (and especially bugfix) the code.
			Also editing build orders will be one of the coming features. It's already implemented but the user interface for that is too crappy and too buggy to activate it... 
			The last big thing that will be included is a computer player to play against. For that I will need some sort of 'battle calculator' which also gives me a headache because that makes the whole thing even more inaccurate...
			On the other hand this is a too interesting feature to miss, so it will be included.
		@END

# DEVELOPMENT_FUTURE_CHAPTER = 940
		@940
			@9.4: Future plans with Evolution Forge@900@##
			Well, what probably will come is support for other games. Unfortunately there are not many (popular) games that offer such a complexity as in StarCraft although some games come near or would just be fun to develop (like WarCraft or Warhammer). If you have any idea what other games should be included, please let me know :) TODO
			Also I thought about going more into parallel computing (e.g. over the internet) or similar things :ugly:
			TEXT
		@END

# DEVELOPMENT_NOTIMPLEMENTED_CHAPTER = 950
		@950
			@9.5: Things will never be implemented@900@##
			Not so sure about that
			TEXT
		@END

		@960
		MAKING OF

		Very helpful Joel Spolsky 'User interface design for programmers' which explains very well the point that the user (that is you! :) ) not necessarily has a degree in computer science and loves to figure out what the programmer was thinking when he was designing the interface ;)
		'GUI bloopers' by jeff johnson does then look at certain "Don'ts and Do's" by looking at real examples in great detail.

		I think I used hundred of papers to think out algorithms, make out menu behaviors or figuring out bugs in the program and spend thousands of hours programming this thing. All in all I learned a lot and you can be certain that there will more coming from my keyboard at a later date :>

		@END

# PHILOSOHPY_MAIN_CHAPTER = 1000
		@1000
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 10. Philosophy@0@###
			~BULLET_BITMAP~@10.1: Evolution@1010@##
			~BULLET_BITMAP~@10.2: TODO@1020@##
			~BULLET_BITMAP~@10.3: Reality check@1030@#
		@END

# PHILOSOPHY_EVOLUTION_CHAPTER = 1010
		@1010
			@10.1 Evolution@1000@##

			Evolution 
			TEXT
		@END

# PHILOSOPHY_GOD_CHAPTER = 1020
		@1020
			@10.2 TODO@1000@##
			If I talk about evolution I cannot just remain on the scientific side of the subject. The act of evolution itself is woven into practically everything what is going on. ~~
			social darwinism ~~

			I also want to talk about creationism, because looking at the critics of a theory also helps to get a bigger picture. I think both - the 'theory' of evolution and creationism has a point but by dismissing each other they do not come to a good solution. The theory of evolution explains in great detail (or in great simplicity if you wish) which way 'we' took to get to the point we are now. Creationism on the other hand explains how it all started. The researchers stumbled over a number of shards of a dish, the one group says that god has created the shards as they lie on the ground while the other group says that this is nonsense, the dish was dropped there.
			Being rational one what immediately think that the second group 'is right'. But the only thing they do is to move the discussion to another level. Who put the dish there at first? Who put up the laws of gravity?
			To make it a little more clear I will speak in terms of 'Evolution Forge'. Did YOU create the build order that resulted at the end? No. You've 'just' set up the rules and the build order developed around them. So who is the creator? The program? The rules? You? I?
			It's getting confusing!
			The point is that as stated above if you argue if the build order was created as it is or if you have created the build order by giving the goals is pointless because both arguments are correct. The only difference between 'creationism' and 'evolution' is that 'creationism' let's a door open for things that can not evolute. Even if you try hard you will not be able to get a build order like 'Battle Cruiser' 'SCV' 'SCV' 'Barracks' 'Tank' because the program (i.e. the laws of physics) dismiss any such build order after one generation.

			Real world on the other hand is different

			I actually believe in two gods (call me a polytheist if you wish), one 'creator' and one 'social god'. I think we discussed the first one in great detail. What about the 'social god'?
			Ah, well, this is game theory. 
			We are constructed as people who normally live in small groups (100-200 people, if you want to learn more about our past - before we began agriculture, read Chapter 11.1 The biggest mistake in human history) where everyone knows everyone. In a huge society (talking of millions) it is impossible to even meet everyone. So we often meet unknown people. 
			In a small society where we often meet the same people again and again we can easily decide if we can trust this person or not. If we have caught them lying once we do not trust them anymore, if this person does not really cooperate with you you maybe won't help them. This 'strategy' is called 'This for that', i.e. normally we cooperate but as soon as someone no longer cooperates we refuse to cooperate, too, until this person cooperates again.
			This is a stable strategy as in the ideal case (i.e. you meet other members of the society often) no other strategy can subjugate-TODO this society.
			Now what if our society grows beyond a point where we no longer can know everyone? Where we often meet other people just once? Where if the other person does not cooperate the first time we have no possibility to 'pay back'? Well, the only  other stable strategy is 'never cooperate' which is what our society currently leads to. If we do not believe in a higher goodness, call it god / altrurism / whatever, where we believe that if we help person A, A will help person B, B will help person C etc. i.e. get their 'cooperation' in circles (maybe even shifted in time to the next generation), then society goes 'to the dogs' (not literally because dogs themselves are very social animals :} ).

			Help others! Believe in a greater goodness! It's the logical thing to do! (talking of rationalizing believe... but hey, game theory proves it :) )
			
			God - two gods

			why do people today at all still believe in creationism? I do not want to criticize them, after all science does not give the answer who did 

			
			TEXT
		@END

# PHILOSOPHY_REALITY_CHAPTER = 1030
		@1040
			@10.4 Reality check@1000@##
				
			In 10.2 I already mentioned a little the situation of our society. Well, I do not want to sound pessimistic
			
			
			TEXT
		@END

		@1100
			~SMALL_ARROW_LEFT_BITMAP~@Chapter 11. Articles@0@###
			~BULLET_BITMAP~@11.1: Effective citizen@1110@##
			~BULLET_BITMAP~@11.2: 911 was an inside job.@1120@##
			~BULLET_BITMAP~@11.3: 777 was an inside job.@1130@##
			~BULLET_BITMAP~@11.4: The worst mistake of human history@1140@#
		@END
		@1110
			@11.1 Effective citizen and 1984@1100@##
			
			$11.1.1 Effective citizen$
			I say public secret because these things are widely availible. One only needs the time to find it. Which is what brings me to the point, my purpose in creating this show is to offer to those who are either too busy, unable or simply unwilling to do the research on their own. I seek to revise and amplify your world view.
			Now, a lot of us have come to the realisation that the corporate or mainstream media has been rather untruthful as of late, ok, we go ahead and say it, they've lied to has, they've full on lied to us, they've fed us with propaganda, they've given us disinformation, they've obfuscated the truth on several occations, they've even given the same photograph for completely different facilities. And these people are not above lying. This is what they do for a living. They stretch the truth, they bend the truth, they twist the things around and they support a particular agenda and that is the corporate agenda.
			I was reading somewhere once where someone asks me how large is the workers' section in the newspaper, in the daily paper, and I said what do you mean by that and he said well you've got a huge business section, what part of the newspaper is devoted to the average working citizen, what is the workers' section? and the answer of course is that there is not one there is obviously not one because the newspaper is not designed for the average common individual it is designed for the business people the corporate elites, that's who the information is tailored to and that's who it is written for. And the information presented on my show is going to come from media both corporate owned in order to examine the spin as well as from independant and alternative media. I break the last two into seperate categories although they're really the same thing. The grouping refers to investigative reporting falling under the heading of independant and the alternative media is consinsting primarily of the french voices the blogs, the web forums things of that nature. The news found on the program is not always going to be political although a large margin of it will be. I find a blend of varying ideas and concepts are the key of understanding our universe. And really at the end of the day this show is about the search for truth, the essence about what life truly means, to me anyway.
			Now some are going to ask, what is an effective citizen and how they can become one?
			Well, that's a great question!
			An effective citizen is an informed one and in being so they don't fall into the pitfalls and traps as more uninformed illeffective citizens do. An effective citizen knows their rights and understands what freedom means, an effective citizen respects privacy and understands how that privacy must be respected for everyone, now this goes far beyond property rights and privacy in your own home, this goes to the right to free speech, it goes to respecting the right to free speech of others and that's the big problem that we have in America right now as you get too many little voices running around and all of them have different opinions and these different opinions oftentimes collide. And this is exactly what the globalists want, this is exactly what the government wants. Sun Tsu writes in the Art of War to divide and conquer is the best way to overcome one's enemy and that is exactly what the government does, they continue feeding us completely different information in different cities, the beauty of this is that you can start a test market in a city, let's take grand rabits michigan TODO for example because in 1952 or 1960 they introduced fluoride into the water, ... TODO but ehm this was the first city to have fluoridated water introduced into the city water system. No other city in the nation had fluoride in their water, they did this in a test market city. The people embraced it, it was sold as this wonderful new cure for germs and bad breath and it can clean teeth you know beyond the fact it's a bio-hazard.
			But the people embraced it and it took shape there, the cottage industry based right there in one small city in one state. But of course this little tactic broadened and was put all across America, everybody has got fluoridated water, we all know this, but that is just one illustration of how people in one city will say 'well I don't see the development of martial law in my city, what are you talking about, it hasn't gotten to me yet.' No it hasn't gotten to you yet, and that is what test market cities are all about. They test something out in Los Angeles, they test it out in Eugen Oregon, they test it out in Austin Texas, in Phoenix Arizona, in Atlanta Georgia, they test all these little agendas out and they see how far they can push until the public begins to accept it. Once the public accept it it becomes the real world, it becomes their new paradigm, and everybody knows that if you tell a big enough lie for long enough time everyone will accept it for the truth.
			I think I've established the essence of the show, so let's get right into it.

		
			$11.1.2 1984$
			1984
		
			Seventyblub? recently that we live in Orwellian times, that our very existence is now resembling the novel 1984 and this all goes back to the fact that we are being watched on a daily basis, cameras have invaded every single facet of our lifes. I was just at the grocery store only a few moments ago and I was looking around and noticed camera, camera, camera. In the manager's office there is a camera pointing straight into the office, there is a camera pointing at you as you walk into the building, right there! And it has the nice brilliant screen showing you Look we're watching you and this is what we can see! Now, it's a public place ok, and it is a private organisation, it is a grocery store, it is owned by a private consortium, probably not the Monsanto group, but it might be, who knows. But the fact of the matter is is that you can't deny the encrouching surveillance upon the American public. And everybody cries out and says 'Oh but it's good, it's good! It helps out, it helps out!' Yeah and it would be wonderful if every single citizen was being watched and monitored, wouldn't that be so great? Every day you wake up you go outside your house and you would not have to live in fear of somebody coming up and mugging you and then disappearing and getting away scot-free TODO because this guy's got a chip in his shoulder now and we got cameras everywhere and this people can't run and hide anymore so there won't be anymore crime, right? Well now, why is it that we're passing all this government legislature to PUT PEOPLE IN JAIL? Specifically designed to keep people in jail, they're putting in jail, passing new legislature, passing all different kinds of laws to arrest people and put them in jail. If they're doing that are they really trying to keep people out, are they really trying to build some beautiful utopian society, which in itself is really a ridiculous concept, there is no true utopia. Not everybody can get along, what we need to find is a balance, a common ground between all of us. 
			In the book 1984, that Eric Blair wrote, Eric Blair is the birth name of George Orwell, Winston Smith worked for the Ministry of Defense removing politically incorrect material from news wires and this is basically working in a censor position. He would then deposit this information into little tubes and it would be whisped TODO to the memory hole, never to be seen or heard again. Now Blair's version of the future was not taken from what he observed while switching sides and recognizing the false deception of both, the controlling factor is the government itself. TODO
			Now he recognized the false paradigm, he saw that socialism and communism were both constructs and that they were designed to control the people and keep them dummed down and sub servient. We haven't moved that far from futilism. And everybody that really thinks about it has only to read 'a slave wage earnerer in today's society' and understand that the connection can very easily be made about a person working in the sale's industry or a person that is working for an hourly wage they can see easily how they are a slave, a indentured servant working for the rest of their life, never able to get ahead. 
			And really this falls all back on education, because education is the foundation of moving ahead, of learning and expanding your world view. In the work 1984 the nation of Oceania is and always has been at war with East Asia and constant bombardments of the island are a daily reminder of that war. And when it becomes apparent to Winston that the bombs are being purpetrated TODO by the very nation that he calls home, Winston has the choice to ignore the facts or speak out against them. Now when we are given new information that conflicts with our current perception of the universe, how should we behave? Should we ignore the knowledge and disregard it out of hand? Or should we accept it for what it is and examine the truth behind it?
			The latter is of course the choice to be made...
			
			Thanks to August Harper!
		@END
			Well, I thought a lot about whether putting it into here. But there is no other choice, we have to talk about it. Now.#
		@1140
			@11.4 The biggest mistake in human history@1110@##
		@END

	
	@END
@END


